{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "de87becd",
   "metadata": {},
   "source": [
    "# Ant Rules\n",
    "\n",
    "1. Ants can only move left or right when traversing forward or backward. For example, if an ant is moving North-East, it can only move to blocks directly north or directly east.\n",
    "\n",
    "1. Ants lay pheromones when leaving the nest and returning to the nest with food\n",
    " 1. The ants do not lay pheromones when not moving\n",
    " 1. The ants lay more pheromones when returning with food versus foraging. The paper indicates 10x as much pheromone.\n",
    " \n",
    "1. There is a maximum number of ants that can occupy a single point. \n",
    " 1. If an ant can't move to any valid location, it must remain in it's current location. \n",
    " 1. Will's rule: There is no occupancy limit for points in the nest.\n",
    " \n",
    "1. For every step, a percentage of pheromone evaporates from each point.\n",
    "\n",
    "1. Ants will choose their next location based on the amount of pheromone at each point.\n",
    " 1. Ants can choose not to move if there is not enough pheromone in front of them (sigmoid relationship).\n",
    "\n",
    "1. Will's Rule: If an ant finds food it switches direction (NE -> SW, etc)\n",
    "\n",
    "1. Will's Rule: When ants return home, there is a large probability that they remain home.\n",
    " 1. Instead of creating all of the agents at once, the authors decided that a fixed amount of ants will be created and leave the nest at each time step. The rule above mimics this rule by only letting out a small percentage of ants at the beginning and avoids the problem of trying to dynamically make/remove agents.\n",
    " \n",
    "# To Do\n",
    "\n",
    "1. See note about rule 7. We should try a model that constantly outputs a fixed amount of agents from the nest. The number of ants created every step should stop after ants return with food and leave to get more food.\n",
    "\n",
    "1. Extension(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8f02184f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from os.path import basename, exists\n",
    "import random\n",
    "from scipy.special import expit\n",
    "\n",
    "def download(url):\n",
    "    filename = basename(url)\n",
    "    if not exists(filename):\n",
    "        from urllib.request import urlretrieve\n",
    "        local, _ = urlretrieve(url, filename)\n",
    "        print('Downloaded ' + local)\n",
    "    \n",
    "download('https://github.com/AllenDowney/ThinkComplexity2/raw/master/notebooks/utils.py')\n",
    "download('https://github.com/AllenDowney/ThinkComplexity2/raw/master/notebooks/Cell2D.py')\n",
    "\n",
    "from utils import decorate, savefig\n",
    "from scipy.signal import correlate2d\n",
    "\n",
    "from Cell2D import Cell2D, draw_array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "55e63c14",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_locs(n, m):\n",
    "    \"\"\"Makes array where each row is an index in an `n` by `m` grid.\n",
    "    \n",
    "    n: int number of rows\n",
    "    m: int number of cols\n",
    "    \n",
    "    returns: NumPy array\n",
    "    \"\"\"\n",
    "    t = [(i, j) for i in range(n) for j in range(m)]\n",
    "    return np.array(t)\n",
    "\n",
    "def make_visible_locs(direction):\n",
    "    \"\"\"Computes the kernel of visible cells.\n",
    "        \n",
    "    direction: ant facing direction\n",
    "    \"\"\"\n",
    "    if direction == \"SE\":\n",
    "        return np.array([[-1, 0], [0, 1]])\n",
    "    elif direction == \"SW\":\n",
    "        return np.array([[-1, 0], [0, -1]])\n",
    "    elif direction == \"NW\":\n",
    "        return np.array([[1, 0], [0, -1]])\n",
    "    else:\n",
    "        return np.array([[1,0], [0,1]])\n",
    "    \n",
    "def flip_directions(direction):\n",
    "    if direction == \"NE\":\n",
    "        return \"SW\"\n",
    "    elif direction == \"NW\":\n",
    "        return \"SE\"\n",
    "    elif direction == \"SW\":\n",
    "        return \"NE\"\n",
    "    else:\n",
    "        return \"NW\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "77ce5b7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Antscape(Cell2D):\n",
    "    \n",
    "    def __init__(self, n, **params):\n",
    "        \"\"\"Initializes the attributes.\n",
    "\n",
    "        n: number of rows and columns\n",
    "        params: dictionary of parameters\n",
    "        \"\"\"\n",
    "        self.n = n\n",
    "        self.params = params\n",
    "        \n",
    "        #parameters\n",
    "        self.ant_per_cell_max = self.params.get('max_ants', 1)\n",
    "        self.sigmoid_offset = self.params.get('sigmoid_offset', 1)\n",
    "        \n",
    "        # initially all cells are empty\n",
    "        self.array = self.make_env()\n",
    "        \n",
    "        # pheromone array\n",
    "        self.parray = np.ones([n,n])\n",
    "        \n",
    "        # make the agents\n",
    "        self.make_agents()\n",
    "        \n",
    "    \n",
    "    def make_env(self):\n",
    "        \"\"\"\n",
    "        TODO: This isn't a great solution. Needs to be more elegant.\n",
    "        \n",
    "        square with food = 1\n",
    "        square with nest = 2\n",
    "        \"\"\"\n",
    "        array = np.zeros([self.n, self.n])\n",
    "        \n",
    "        # make food\n",
    "        x, y = 10, 10\n",
    "        for i in range(x):\n",
    "            for j in range(y):\n",
    "                #make food\n",
    "                array[120 + i, 90 + j] = 1\n",
    "                #make nest\n",
    "                array[i, j] = 2\n",
    "                \n",
    "        for i in range(40):\n",
    "            array[i,0] = 2\n",
    "            array[0, i] = 2\n",
    "        return array\n",
    "\n",
    "        \n",
    "    def make_agents(self):\n",
    "        \"\"\"Makes the agents.\"\"\"\n",
    "        \n",
    "        # determine where the agents start and generate locations\n",
    "        loc = (0,0)\n",
    "\n",
    "        # make the agents\n",
    "        num_agents = self.params.get('num_agents', 20)\n",
    "        loc = self.params.get('starting_loc', (0,0))\n",
    "        self.agents = [Agent(loc, self.params) \n",
    "                       for i in range(num_agents)]\n",
    "        \n",
    "        # keep track of which cells are occupied\n",
    "        self.occupied = [agent.loc for agent in self.agents]\n",
    "            \n",
    "    def find_food(self, center):\n",
    "        return self.array[center] == 1\n",
    "    \n",
    "    def find_nest(self, center):\n",
    "        return self.array[center] == 2\n",
    "        \n",
    "    def p_deposit(self, center, p):\n",
    "        \"\"\"\n",
    "        TODO: parameterize pheromone limit\n",
    "        \"\"\"\n",
    "        self.parray[center] += p\n",
    "        \n",
    "        if self.parray[center] > 100:\n",
    "            self.parray[center] = 100\n",
    "            \n",
    "    def look_and_move(self, center, direction):\n",
    "        \"\"\"\n",
    "        Finds available locations for agent, picks a location based on pheromone weights,\n",
    "        decides whether agent moves based on a sigmoid function.\n",
    "        \"\"\"\n",
    "        \n",
    "        # find all cells ant can move to and deals with edge cases\n",
    "        locs = make_visible_locs(direction)\n",
    "        locs = (locs + center) % self.n\n",
    "        \n",
    "        # convert rows of the array to tuples\n",
    "        locs = [tuple(loc) for loc in locs]\n",
    "        \n",
    "        #calc number of ants in each a cell\n",
    "        num_ants = {}\n",
    "        for loc in locs:\n",
    "            count = 0\n",
    "            for xy in self.occupied:\n",
    "                if xy == loc:\n",
    "                    count += 1\n",
    "            num_ants[loc] = count\n",
    "        \n",
    "        # select cells that are not too full or that are part of the nest\n",
    "        empty_locs = [loc for loc in locs if (num_ants[loc] < self.ant_per_cell_max) or self.array[loc] == 2]\n",
    "\n",
    "        # if all visible cells are occupied, stay put\n",
    "        if len(empty_locs) == 0:\n",
    "            return center\n",
    "        \n",
    "        # look up the pheromone level in each cell\n",
    "        p_levels = [self.parray[loc] for loc in empty_locs]\n",
    "        \n",
    "        new_loc = random.choices(empty_locs, weights=p_levels)[0]\n",
    "        \n",
    "        # decide whether to move to new location\n",
    "        move_prob = expit(self.parray[new_loc] - self.sigmoid_offset)\n",
    "        \n",
    "        if np.random.choice([True, False], p=[move_prob, 1 - move_prob]):\n",
    "            return new_loc\n",
    "        else:\n",
    "            return center\n",
    "            \n",
    "        \n",
    "    def step(self):\n",
    "        \"\"\"Executes one time step.\"\"\"\n",
    "        \n",
    "        \n",
    "        # loop through the agents in random order\n",
    "        random_order = np.random.permutation(self.agents)\n",
    "        \n",
    "        #decrease pheromone levels\n",
    "        self.parray *= .98\n",
    "        self.parray[self.parray < 1] = 1\n",
    "#         self.parray += .01\n",
    "        \n",
    "        for agent in random_order:\n",
    "            \n",
    "            # mark the current cell unoccupied\n",
    "            self.occupied.remove(agent.loc)\n",
    "            \n",
    "            # execute one step\n",
    "            agent.step(self)\n",
    "            \n",
    "            #mark fly's new cell as occupied\n",
    "            self.occupied.append(agent.loc)\n",
    "        \n",
    "        return len(self.agents)\n",
    "    \n",
    "    def draw(self):\n",
    "        \"\"\"Draws the cells.\"\"\"\n",
    "        plt.figure(figsize=(10,8))\n",
    "        plt.subplot(1,2,1)\n",
    "        draw_array(self.parray, cmap='Purples', vmax=10, origin='lower')\n",
    "        plt.subplot(1,2,2)\n",
    "        draw_array(self.array, cmap='Blues', vmax=3, origin='lower')\n",
    "        \n",
    "        \n",
    "        # draw occupied cells\n",
    "        xs, ys = self.get_coords(self.occupied)\n",
    "        self.points = plt.plot(xs, ys, '.', color='black')[0]\n",
    "    \n",
    "    def get_coords(self, locs):\n",
    "        \"\"\"Gets the coordinates of the agents.\n",
    "        \n",
    "        Transforms from (row, col) to (x, y).\n",
    "        \n",
    "        returns: tuple of sequences, (xs, ys)\n",
    "        \"\"\"\n",
    "        locs = list(locs)\n",
    "        rows, cols = np.transpose(locs)\n",
    "        xs = cols + 0.5\n",
    "        ys = rows + 0.5\n",
    "        return xs, ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e80e1035",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Agent:\n",
    "    \n",
    "    def __init__(self, loc, params):\n",
    "\n",
    "        self.loc = tuple(loc)\n",
    "        self.has_food = False\n",
    "        self.is_home = True\n",
    "        self.direction = \"NE\"\n",
    "        self.p_foraging  = 1\n",
    "        self.p_returning = 20\n",
    "    \n",
    "\n",
    "    def step(self, env):\n",
    "        \n",
    "        old_loc = self.loc\n",
    "        \n",
    "        #look for food\n",
    "        if env.find_food(self.loc) and not self.has_food:\n",
    "            self.direction = flip_directions(self.direction)\n",
    "            self.has_food = True\n",
    "        \n",
    "        #look for nest\n",
    "        if env.find_nest(self.loc):\n",
    "            if not self.is_home and self.has_food:\n",
    "                self.direction = flip_directions(self.direction)\n",
    "                self.has_food = False\n",
    "                self.is_home = True\n",
    "        else:\n",
    "            self.is_home = False\n",
    "        \n",
    "        #move agent if it doesn't want to stay home\n",
    "        if not self.is_home or np.random.choice([False, True], p=[.995, .005]):\n",
    "            self.loc = env.look_and_move(self.loc, self.direction)\n",
    "        \n",
    "        #lay pheremone (only if you move)\n",
    "        if old_loc != self.loc:\n",
    "            if self.has_food:\n",
    "                p = self.p_returning\n",
    "            else:\n",
    "                p = self.p_foraging\n",
    "                \n",
    "            env.p_deposit(self.loc, p)\n",
    "                                                      \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5031cff0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env = Antscape(200, num_agents=500, max_ants=10, starting_loc=(9,9))\n",
    "\n",
    "\n",
    "env.step()\n",
    "env.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a5ac9464",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.animate(frames=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5b131fe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.draw()\n",
    "plt.savefig(\"example_run_1500.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "532c99e3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
