{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "de87becd",
   "metadata": {},
   "source": [
    "# Ant Rules\n",
    "\n",
    "1. Ants can only move left or right when traversing forward or backward. For example, if an ant is moving North-East, it can only move to blocks directly north or directly east.\n",
    "\n",
    "1. Ants lay pheromones when leaving the nest and returning to the nest with food\n",
    " 1. The ants do not lay pheromones when not moving\n",
    " 1. The ants lay more pheromones when returning with food versus foraging. The paper indicates 10x as much pheromone.\n",
    " \n",
    "1. There is a maximum number of ants that can occupy a single point. \n",
    " 1. If an ant can't move to any valid location, it must remain in it's current location. \n",
    " 1. Will's rule: There is no occupancy limit for points in the nest.\n",
    " \n",
    "1. For every step, a percentage of pheromone evaporates from each point.\n",
    "\n",
    "1. Ants will choose their next location based on the amount of pheromone at each point.\n",
    " 1. Ants can choose not to move if there is not enough pheromone in front of them (sigmoid relationship).\n",
    "\n",
    "1. Will's Rule: If an ant finds food it switches direction (NE -> SW, etc)\n",
    "\n",
    "1. Will's Rule: When ants return home, there is a large probability that they remain home.\n",
    " 1. Instead of creating all of the agents at once, the authors decided that a fixed amount of ants will be created and leave the nest at each time step. The rule above mimics this rule by only letting out a small percentage of ants at the beginning and avoids the problem of trying to dynamically make/remove agents.\n",
    " \n",
    "# To Do\n",
    "\n",
    "1. See note about rule 7. We should try a model that constantly outputs a fixed amount of agents from the nest. The number of ants created every step should stop after ants return with food and leave to get more food.\n",
    "\n",
    "1. Extension(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8f02184f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from os.path import basename, exists\n",
    "import random\n",
    "from scipy.special import expit\n",
    "\n",
    "def download(url):\n",
    "    filename = basename(url)\n",
    "    if not exists(filename):\n",
    "        from urllib.request import urlretrieve\n",
    "        local, _ = urlretrieve(url, filename)\n",
    "        print('Downloaded ' + local)\n",
    "    \n",
    "download('https://github.com/AllenDowney/ThinkComplexity2/raw/master/notebooks/utils.py')\n",
    "download('https://github.com/AllenDowney/ThinkComplexity2/raw/master/notebooks/Cell2D.py')\n",
    "\n",
    "from utils import decorate, savefig\n",
    "from scipy.signal import correlate2d\n",
    "\n",
    "from Cell2D import Cell2D, draw_array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "55e63c14",
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_locs(n, m):\n",
    "    \"\"\"Makes array where each row is an index in an `n` by `m` grid.\n",
    "    \n",
    "    n: int number of rows\n",
    "    m: int number of cols\n",
    "    \n",
    "    returns: NumPy array\n",
    "    \"\"\"\n",
    "    t = [(i, j) for i in range(n) for j in range(m)]\n",
    "    return np.array(t)\n",
    "\n",
    "def make_visible_locs(direction):\n",
    "    \"\"\"Computes the kernel of visible cells.\n",
    "        \n",
    "    direction: ant facing direction\n",
    "    \"\"\"\n",
    "    if direction == \"SE\":\n",
    "        return np.array([[-1, 0], [0, 1]])\n",
    "    elif direction == \"SW\":\n",
    "        return np.array([[-1, 0], [0, -1]])\n",
    "    elif direction == \"NW\":\n",
    "        return np.array([[1, 0], [0, -1]])\n",
    "    else:\n",
    "        return np.array([[1,0], [0,1]])\n",
    "    \n",
    "def flip_directions(direction):\n",
    "    if direction == \"NE\":\n",
    "        return \"SW\"\n",
    "    elif direction == \"NW\":\n",
    "        return \"SE\"\n",
    "    elif direction == \"SW\":\n",
    "        return \"NE\"\n",
    "    else:\n",
    "        return \"NW\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "77ce5b7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Antscape(Cell2D):\n",
    "    \n",
    "    def __init__(self, n, **params):\n",
    "        \"\"\"Initializes the attributes.\n",
    "\n",
    "        n: number of rows and columns\n",
    "        params: dictionary of parameters\n",
    "        \"\"\"\n",
    "        self.n = n\n",
    "        self.params = params\n",
    "        \n",
    "        #parameters\n",
    "        self.ant_per_cell_max = self.params.get('ants_per_cell', 1)\n",
    "        self.sigmoid_offset = self.params.get('sigmoid_offset', 1)\n",
    "        self.nest_size = self.params.get('nest_size', 100)\n",
    "        self.ants_per_step = self.params.get('ants_per_step', 10)\n",
    "        self.p_decay = self.params.get('p_decay', .95)\n",
    "        \n",
    "        # initially all cells are empty\n",
    "        self.array = self.make_env()\n",
    "        \n",
    "        # pheromone array\n",
    "        self.parray = np.ones([n,n])\n",
    "        \n",
    "        # make the agents\n",
    "        self.make_agents()\n",
    "        \n",
    "    \n",
    "    def make_env(self):\n",
    "        \"\"\"\n",
    "        TODO: This isn't a great solution. Needs to be more elegant.\n",
    "        \n",
    "        square with food >= 1\n",
    "        square with nest = -1\n",
    "        \"\"\"\n",
    "        array = np.zeros([self.n, self.n])\n",
    "        \n",
    "        # make food\n",
    "        for i in range(self.n):\n",
    "            for j in range(self.n):\n",
    "                if np.random.rand() >= .5:\n",
    "                    array[i,j] = 1\n",
    "                \n",
    "        #make nest\n",
    "        nh, nw = 10,10\n",
    "        for i in range(nh):\n",
    "            for j in range(nw):\n",
    "                array[i, j] = -1\n",
    "                \n",
    "        return array\n",
    "\n",
    "        \n",
    "    def make_agents(self):\n",
    "        \"\"\"Makes the agents.\"\"\"\n",
    "        \n",
    "        # determine where the agents start and generate locations\n",
    "        loc = (0,0)\n",
    "\n",
    "        # make the agents\n",
    "        num_agents = self.params.get('starting_ants', 10)\n",
    "        loc = self.params.get('starting_loc', (0,0))\n",
    "        self.agents = [Agent(loc, self.params) \n",
    "                       for i in range(num_agents)]\n",
    "        \n",
    "        # keep track of which cells are occupied\n",
    "        self.occupied = [agent.loc for agent in self.agents]\n",
    "            \n",
    "    def find_food(self, center):\n",
    "        \n",
    "        if self.array[center] > 0:\n",
    "            self.array[center] -= 1\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "    \n",
    "    def find_nest(self, center):\n",
    "        return self.array[center] == -1\n",
    "        \n",
    "    def p_deposit(self, center, p):\n",
    "        \"\"\"\n",
    "        TODO: parameterize pheromone limit\n",
    "        \"\"\"\n",
    "        self.parray[center] += p\n",
    "        \n",
    "        if self.parray[center] > 100:\n",
    "            self.parray[center] = 100\n",
    "\n",
    "    \n",
    "    def look_and_move(self, center, direction):\n",
    "        \"\"\"\n",
    "        Finds available locations for agent, picks a location based on pheromone weights,\n",
    "        decides whether agent moves based on a sigmoid function.\n",
    "        \"\"\"\n",
    "        \n",
    "        \"\"\"\n",
    "        TODO:\n",
    "        movement code for ants that have food and want to return home.\n",
    "        \n",
    "        Arriving at the nest, it lays down the food item and return outward once more. (Note that should\n",
    "        there be at any point no guiding pheromone in front of them, they move toward the central trail,\n",
    "        although this rule is only rarely invoked.) \n",
    "        \"\"\"\n",
    "        \n",
    "        # find all cells ant can move to and deals with edge cases\n",
    "        locs = make_visible_locs(direction)\n",
    "        locs = (locs + center) % self.n\n",
    "        \n",
    "        # convert rows of the array to tuples\n",
    "        locs = [tuple(loc) for loc in locs]\n",
    "        \n",
    "        #calc number of ants in each a cell\n",
    "        num_ants = {}\n",
    "        for loc in locs:\n",
    "            count = 0\n",
    "            for xy in self.occupied:\n",
    "                if xy == loc:\n",
    "                    count += 1\n",
    "            num_ants[loc] = count\n",
    "        \n",
    "        # select cells that are not too full or that are part of the nest\n",
    "        empty_locs = [loc for loc in locs if (num_ants[loc] < self.ant_per_cell_max) or self.array[loc] == 2]\n",
    "\n",
    "        # if all visible cells are occupied, stay put\n",
    "        if len(empty_locs) == 0:\n",
    "            return center\n",
    "        \n",
    "        # look up the pheromone level in each cell\n",
    "        p_levels = [self.parray[loc] for loc in empty_locs]\n",
    "        \n",
    "        new_loc = random.choices(empty_locs, weights=p_levels)[0]\n",
    "        \n",
    "        #TODO: FOR ANTS RETURNING WITH FOOD, ONLY RETURN new_loc IF PHEROMONE\n",
    "        #LEVELS ARE ABOVE A CERTAIN LEVEL. IF NOT, MOVE TOWARDS CENTER DIAGONAL\n",
    "        \n",
    "        # decide whether to move to new location\n",
    "        move_prob = expit(self.parray[new_loc] - self.sigmoid_offset)\n",
    "        \n",
    "        if np.random.choice([True, False], p=[move_prob, 1 - move_prob]):\n",
    "            return new_loc\n",
    "        else:\n",
    "            return center\n",
    "            \n",
    "        \n",
    "    def step(self):\n",
    "        \"\"\"Executes one time step.\"\"\"\n",
    "        \n",
    "        # loop through the agents in random order\n",
    "        random_order = np.random.permutation(self.agents)\n",
    "        \n",
    "        #decrease pheromone levels\n",
    "        self.parray *= self.p_decay\n",
    "        self.parray[self.parray < 1] = 1\n",
    "#         self.parray += .01\n",
    "        \n",
    "        for agent in random_order:\n",
    "            # mark the current cell unoccupied\n",
    "            self.occupied.remove(agent.loc)\n",
    "            \n",
    "            # execute one step\n",
    "            agent.step(self)\n",
    "            \n",
    "            # remove agents on edge of map\n",
    "            if (agent.loc[0] % self.n == 0) or (agent.loc[1] % self.n == 0):\n",
    "                self.agents.remove(agent)\n",
    "            else:\n",
    "                #mark ants's new cell as occupied\n",
    "                self.occupied.append(agent.loc)\n",
    "        \n",
    "        #add new agents\n",
    "        if len(self.agents) < self.nest_size:\n",
    "            self.add_agents(min(self.ants_per_step, self.nest_size - len(self.agents)))\n",
    "            \n",
    "        \n",
    "        return len(self.agents)\n",
    "    \n",
    "    \n",
    "    def add_agents(self, size):\n",
    "        \"\"\"Generates a new agent.\n",
    "                \n",
    "        returns: new Agent\n",
    "        \"\"\"\n",
    "        loc = self.params.get('starting_loc', (0,0))\n",
    "        for i in range(size):\n",
    "            new_agent = Agent(loc, self.params)\n",
    "            self.agents.append(new_agent)\n",
    "            self.occupied.append(new_agent.loc)\n",
    "        return new_agent\n",
    "    \n",
    "    def draw(self):\n",
    "        \"\"\"Draws the cells.\"\"\"\n",
    "        plt.figure(figsize=(10,8))\n",
    "        plt.subplot(1,2,1)\n",
    "        draw_array(self.parray, cmap='Purples', vmax=10, origin='lower')\n",
    "        plt.subplot(1,2,2)\n",
    "        draw_array(self.array, cmap='Blues', vmax=3, origin='lower')\n",
    "        \n",
    "        \n",
    "        # draw occupied cells\n",
    "        xs, ys = self.get_coords(self.occupied)\n",
    "        self.points = plt.plot(xs, ys, '.', color='black')[0]\n",
    "    \n",
    "    def get_coords(self, locs):\n",
    "        \"\"\"Gets the coordinates of the agents.\n",
    "        \n",
    "        Transforms from (row, col) to (x, y).\n",
    "        \n",
    "        returns: tuple of sequences, (xs, ys)\n",
    "        \"\"\"\n",
    "        locs = list(locs)\n",
    "        rows, cols = np.transpose(locs)\n",
    "        xs = cols + 0.5\n",
    "        ys = rows + 0.5\n",
    "        return xs, ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "e80e1035",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Agent:\n",
    "    \n",
    "    def __init__(self, loc, params):\n",
    "\n",
    "        self.loc = tuple(loc)\n",
    "        self.has_food = False\n",
    "        self.is_home = True\n",
    "        self.direction = \"NE\"\n",
    "        self.p_foraging  = params.get('p_foraging', 1)\n",
    "        self.p_returning = params.get('p_returning',10)\n",
    "    \n",
    "\n",
    "    def step(self, env):\n",
    "        \n",
    "        old_loc = self.loc\n",
    "        \n",
    "        #look for food\n",
    "        if env.find_food(self.loc) and not self.has_food:\n",
    "            self.direction = flip_directions(self.direction)\n",
    "            self.has_food = True\n",
    "        \n",
    "        #look for nest\n",
    "        if env.find_nest(self.loc):\n",
    "            if not self.is_home and self.has_food:\n",
    "                self.direction = flip_directions(self.direction)\n",
    "                self.has_food = False\n",
    "                self.is_home = True\n",
    "        else:\n",
    "            self.is_home = False\n",
    "        \n",
    "        #move agent if it doesn't want to stay home\n",
    "        self.loc = env.look_and_move(self.loc, self.direction)\n",
    "        \n",
    "        #lay pheremone (only if you move)\n",
    "        if old_loc != self.loc:\n",
    "            if self.has_food:\n",
    "                p = self.p_returning\n",
    "            else:\n",
    "                p = self.p_foraging\n",
    "                \n",
    "            env.p_deposit(self.loc, p)\n",
    "                                                      \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "5031cff0",
   "metadata": {},
   "outputs": [],
   "source": [
    "env = Antscape(100, starting_ants=5, ants_per_cell=5, ants_per_step=1, starting_loc=(9,9),\n",
    "               sigmoid_offset=3, nest_size=1000, p_foraging=1, p_returning=5, p_decay=.96)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "a5ac9464",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for i in range(500):\n",
    "#     env.step()\n",
    "# env.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "7e66761a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.animate(500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "d1cd2896",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "env.draw()\n",
    "plt.savefig(\"scattered_run_1000.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74b8e257",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0):\n",
    "    print(\"hi\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
